name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    env:
      SSH_HOST: ${{ vars.SSH_HOST }}
      SSH_USER: ${{ vars.SSH_USER }}
      SSH_DIR: ${{ vars.SSH_DIR || '~' }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # Application configuration
      APP_NAME: Topline
      APP_ENV: production
      APP_DEBUG: false
      APP_TIMEZONE: ${{ vars.APP_TIMEZONE || 'UTC' }}
      APP_URL: ${{ vars.APP_URL }}
      APP_PORT: ${{ vars.APP_PORT || '80' }}

      # Database configuration
      DB_CONNECTION: ${{ vars.DB_CONNECTION || 'mysql' }}
      DB_HOST: ${{ vars.DB_HOST || 'mysql' }}
      DB_PORT: ${{ vars.DB_PORT || '3306' }}
      FORWARD_DB_PORT: ${{ vars.FORWARD_DB_PORT || '3306' }}
      DB_DATABASE: ${{ vars.DB_DATABASE || 'topline' }}
      DB_USERNAME: ${{ secrets.DB_USERNAME || 'sail' }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      # Redis configuration
      REDIS_HOST: ${{ vars.REDIS_HOST || 'redis' }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      REDIS_PORT: ${{ vars.REDIS_PORT || '6379' }}

      # Mail configuration
      MAIL_HOST: ${{ vars.MAIL_HOST || 'mailpit' }}
      MAIL_PORT: ${{ vars.MAIL_PORT || '1025' }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_FROM_ADDRESS: ${{ vars.MAIL_FROM_ADDRESS }}

      # External APIs
      NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}

      # Meilisearch
      MEILISEARCH_HOST: ${{ vars.MEILISEARCH_HOST || 'http://meilisearch:7700' }}

    steps:
      # Step 1: Checkout the code (this runs on the GitHub runner, not the server)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install SSH keys
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST > ~/.ssh/known_hosts

      # Step 3: Create work directory on server
      - name: Create work directory
        run: |
          ssh $SSH_USER@$SSH_HOST "
            mkdir -p $SSH_DIR/${GITHUB_REPOSITORY##*/}
          "

      # Step 4: Transfer repository files to server
      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./ $SSH_USER@$SSH_HOST:$SSH_DIR/${GITHUB_REPOSITORY##*/}/

      # Step 5: Configure environment
      - name: Configure environment file
        run: |
          ssh $SSH_USER@$SSH_HOST "
            cd $SSH_DIR/${GITHUB_REPOSITORY##*/} &&
            cp .env.example .env &&

            # Application configuration
            sed -i 's|APP_NAME=.*|APP_NAME=$APP_NAME|' .env &&
            sed -i 's|APP_ENV=.*|APP_ENV=$APP_ENV|' .env &&
            sed -i 's|APP_DEBUG=.*|APP_DEBUG=$APP_DEBUG|' .env &&
            sed -i 's|APP_TIMEZONE=.*|APP_TIMEZONE=$APP_TIMEZONE|' .env &&
            sed -i 's|APP_URL=.*|APP_URL=$APP_URL|' .env &&
            sed -i 's|APP_PORT=.*|APP_PORT=$APP_PORT|' .env &&

            # Database configuration
            sed -i 's|DB_CONNECTION=.*|DB_CONNECTION=$DB_CONNECTION|' .env &&
            sed -i 's|DB_HOST=.*|DB_HOST=$DB_HOST|' .env &&
            sed -i 's|DB_PORT=.*|DB_PORT=$DB_PORT|' .env &&
            sed -i 's|FORWARD_DB_PORT=.*|FORWARD_DB_PORT=$FORWARD_DB_PORT|' .env &&
            sed -i 's|DB_DATABASE=.*|DB_DATABASE=$DB_DATABASE|' .env &&
            sed -i 's|DB_USERNAME=.*|DB_USERNAME=$DB_USERNAME|' .env &&
            sed -i 's|DB_PASSWORD=.*|DB_PASSWORD=$DB_PASSWORD|' .env &&

            # Redis configuration
            sed -i 's|REDIS_HOST=.*|REDIS_HOST=$REDIS_HOST|' .env &&
            sed -i 's|REDIS_PASSWORD=.*|REDIS_PASSWORD=$REDIS_PASSWORD|' .env &&
            sed -i 's|REDIS_PORT=.*|REDIS_PORT=$REDIS_PORT|' .env &&

            # Mail configuration
            sed -i 's|MAIL_HOST=.*|MAIL_HOST=$MAIL_HOST|' .env &&
            sed -i 's|MAIL_PORT=.*|MAIL_PORT=$MAIL_PORT|' .env &&
            sed -i 's|MAIL_USERNAME=.*|MAIL_USERNAME=$MAIL_USERNAME|' .env &&
            sed -i 's|MAIL_PASSWORD=.*|MAIL_PASSWORD=$MAIL_PASSWORD|' .env &&
            sed -i 's|MAIL_FROM_ADDRESS=.*|MAIL_FROM_ADDRESS=\"$MAIL_FROM_ADDRESS\"|' .env &&

            # External APIs and services
            sed -i 's|NEWS_API_KEY=.*|NEWS_API_KEY=$NEWS_API_KEY|' .env &&
            sed -i 's|MEILISEARCH_HOST=.*|MEILISEARCH_HOST=$MEILISEARCH_HOST|' .env
          "

      # Step 6: Ensure correct permissions on server
      - name: Ensure correct permissions on server
        run: |
          ssh $SSH_USER@$SSH_HOST "
            sudo chown -R $SSH_USER:$SSH_USER $SSH_DIR/${GITHUB_REPOSITORY##*/} || true
          "

      # Step 7: Deploy application
      - name: Deploy application containers
        run: |
          ssh $SSH_USER@$SSH_HOST "
            cd $SSH_DIR/${GITHUB_REPOSITORY##*/} &&
            docker compose -f docker-compose.prod.yml --project-name topline-news-prod down || true &&
            COMPOSE_PROJECT_NAME=topline-news-prod docker compose -f docker-compose.prod.yml up -d --build
          "

      # Step 8: Cleanup SSH keys
      - name: Cleanup
        run: rm -rf ~/.ssh
